spring.application.name=Capstone

# Configurazione di Hibernate per la gestione delle relazioni e della creazione del database
spring.jpa.hibernate.ddl-auto=create
spring.sql.init.mode=always
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=${DATABASE_URL}Backend_Archiplanner
spring.datasource.username=${JDBC_DATABASE_USERNAME}
spring.datasource.password=${JDBC_DATABASE_PASSWORD}

# Cloudinary per immagini
cloudinary.cloud_name=${CL_NAME}
cloudinary.api_key=${CL_KEY}
cloudinary.api_secret=${CL_SECRET}
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

# email automatica
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USER}
spring.mail.password=${MAIL_PWD}
spring.mail.protocol=smtp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com

# Configurazione del token JWT
jwt.secret=${TOKEN}
# Durata del token in millisecondi 1 h
jwt.expiration=604800000

# OAuth2 - Registrazione client Google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.client-authentication-method=client_secret_post
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.registration.google.scope=openid,email,profile,https://www.googleapis.com/auth/calendar
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
app.redirect-url=${REDIRECT_URL}
#http://localhost:5173
#https://archiplanner.vercel.app
#DEBUGGING
logging.level.org.springframework.security.web=DEBUG
logging.level.org.springframework.security.oauth2=TRACE
logging.level.org.springframework.web=DEBUG

google.maps.api.key=${GOOGLE_MAPS_API_KEY}

# Configurazione per far provare l'applicazione su un server locale
#server.address=0.0.0.0
#server.port=8080

#IL RESTO SOTTO UTILE PER IL PUC
# Configurazione logging per analizzare meglio il comportamento SQL
logging.level.it.epicode.backend.common.SqlNoteExtractor=DEBUG
logging.level.org.springframework=WARN

# Configurazione per la gestione dei Large Objects (LOB) se utilizzati nel DB
spring.jpa.properties.hibernate.id.new_generator_mappings=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Specifica un Dialect per PostgreSQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Abilitazione del log SQL per vedere le query eseguite
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

# Aggiungi la configurazione per i timeout di connessione (se necessario)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.connection-timeout=30000